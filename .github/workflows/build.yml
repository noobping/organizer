name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write

env:
  CARGO_TERM_COLOR: always
  BINARY_NAME: ${{ github.event.repository.name }}

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [ x86_64-unknown-linux-gnu, aarch64-unknown-linux-gnu ]

    steps:
      - uses: actions/checkout@v4

      - name: Cache cargo
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install aarch64 linker
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
        env:
          DEBIAN_FRONTEND: noninteractive

      - name: Build (release)
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
        run: |
          set -euo pipefail

          # Map full target triple -> short arch name
          case "${{ matrix.target }}" in
            x86_64-unknown-linux-gnu) SHORTARCH="x86_64" ;;
            aarch64-unknown-linux-gnu) SHORTARCH="arm64" ;;
            *) SHORTARCH="${{ matrix.target }}" ;;
          esac

          cargo build --release --target ${{ matrix.target }} --verbose
          mkdir -p dist

          BIN="target/${{ matrix.target }}/release/${BINARY_NAME}"
          if [ ! -f "$BIN" ]; then
            echo "Expected binary $BIN not found. Did you set BINARY_NAME correctly?" >&2
            exit 1
          fi

          # remove debug symbols to shrink the file
          (command -v strip >/dev/null 2>&1 && strip "$BIN") || true

          OUT="dist/${BINARY_NAME}-${SHORTARCH}-${{ github.run_number }}"
          cp "$BIN" "$OUT"
          chmod +x "$OUT"
          echo "Built $OUT"

      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.BINARY_NAME }}-${{ matrix.target }}-${{ github.run_number }}
          path: dist/*
          if-no-files-found: error

  release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all executables
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Create GitHub Release (auto tag = build number)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.run_number }}
          name: "Build ${{ github.run_number }}"
          body: |
            Automated build from commit: ${{ github.sha }}
            Branch: ${{ github.ref }}
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
